// Code generated by dagger-compiler.  Do not edit.
package com.mayo.mvp.login;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class LoginModule$$ModuleAdapter extends ModuleAdapter<LoginModule> {
  private static final String[] INJECTS = { "members/com.mayo.mvp.login.model.ActLogin", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public LoginModule$$ModuleAdapter() {
    super(com.mayo.mvp.login.LoginModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, LoginModule module) {
    bindings.contributeProvidesBinding("com.mayo.mvp.login.view.ViewLogin", new ProvideViewLoginProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.mayo.mvp.login.presenter.PresenterLogin", new ProvidePresenterLoginProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.mayo.mvp.login.view.ViewLogin>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.mayo.mvp.login.view.ViewLogin>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideViewLoginProvidesAdapter extends ProvidesBinding<com.mayo.mvp.login.view.ViewLogin>
      implements Provider<com.mayo.mvp.login.view.ViewLogin> {
    private final LoginModule module;

    public ProvideViewLoginProvidesAdapter(LoginModule module) {
      super("com.mayo.mvp.login.view.ViewLogin", IS_SINGLETON, "com.mayo.mvp.login.LoginModule", "provideViewLogin");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.mayo.mvp.login.view.ViewLogin>}.
     */
    @Override
    public com.mayo.mvp.login.view.ViewLogin get() {
      return module.provideViewLogin();
    }
  }

  /**
   * A {@code Binding<com.mayo.mvp.login.presenter.PresenterLogin>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.mayo.mvp.login.presenter.PresenterLogin} and its
   * dependencies.
   *
   * Being a {@code Provider<com.mayo.mvp.login.presenter.PresenterLogin>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidePresenterLoginProvidesAdapter extends ProvidesBinding<com.mayo.mvp.login.presenter.PresenterLogin>
      implements Provider<com.mayo.mvp.login.presenter.PresenterLogin> {
    private final LoginModule module;
    private Binding<com.mayo.mvp.login.view.ViewLogin> viewLogin;

    public ProvidePresenterLoginProvidesAdapter(LoginModule module) {
      super("com.mayo.mvp.login.presenter.PresenterLogin", IS_SINGLETON, "com.mayo.mvp.login.LoginModule", "providePresenterLogin");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      viewLogin = (Binding<com.mayo.mvp.login.view.ViewLogin>) linker.requestBinding("com.mayo.mvp.login.view.ViewLogin", LoginModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(viewLogin);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.mayo.mvp.login.presenter.PresenterLogin>}.
     */
    @Override
    public com.mayo.mvp.login.presenter.PresenterLogin get() {
      return module.providePresenterLogin(viewLogin.get());
    }
  }
}
